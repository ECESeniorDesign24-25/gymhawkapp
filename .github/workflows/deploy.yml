name: Deploy
# on:
#   push:
#     branches:
#       - main
on: pull_request
permissions:
  contents: read
  id-token: write
  pull-requests: write
  checks: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Client
        run: |
          npm install
          npm ci
          npm run build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGE_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGE_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Deploy to Firebase
        working-directory: functions
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Decode and write the service account key to a file
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > ./service-account-key.json
          export GOOGLE_APPLICATION_CREDENTIALS="${PWD}/service-account-key.json"
          
          # Verify the file has the correct format
          grep -q '"type": "service_account"' ./service-account-key.json || { echo "Error: Invalid service account format"; cat ./service-account-key.json | grep type; exit 1; }
          
          # Deploy with the service account
          npx firebase-tools deploy --project=${{ secrets.GOOGLE_CLOUD_PROJECT }} --debug
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./service-account-key.json